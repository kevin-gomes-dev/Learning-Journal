Classes and Object-oriented Programming in Python 3 - Mateo Prigl
-----------------------------------------------------------------
Module 2: Everything is an Object
-----------------------------------------------------------------
__class__ - Gives the class of an instance
__dict__ - Gives JSON representation (dictionary in python terms)
__new__ - is called every time we make an instance. Reserves/allocates memory, then passes to __init__
__init__ - By default, simply returns an object of type <Class>

Module 3: Instantiating Custom Classes
-----------------------------------------------------------------
Classes take self as first param for all methods. Doesn't have to be 'self' but do it
Every class has a __dict__ to get the inner dictionary. This is where it stores data. Think JSON. Defining the self.x and others simply fills the __dict__ of that instance. Instance Attributes is another word for it.
__str__ - Default print for obj, returns string which can be used elsewhere, used in str(o)
__init__ - Constructor
__add__ - What happens when you do obj1 + obj2. In context of employees, doesn't make sense.
__repr__ - String representation of object, to be used by devs, more technical. Ideally have it be such that using eval(__repr__) would create the obj. Interactive mode uses __repr__

The __example__ methods are called Dunder (or Magic) Methods (double underscore). They implement an interface that allows the shorthand to be used (obj1 + obj2, print(obj), etc). Usually called indirectly, like new passing to init, and str called from printing. With print, if __str__ not definted, use __repr__. If both gone, will use default.

Module 4: Managing Attribute Access
-----------------------------------------------------------------
Abstraction: Not needing users of our modules to see internals to use, simply use interface.
Encapsulation: Grouping all the data of the module together as one big "unit".

Access modifiers public and private are not in python. To solve problem of misuse, we trust users to know not to directly set data members. As convention, prepend private data with undersscore. To make it more obvious, use Name Mangling. Prepend with 2 underscores. When trying to use, you will get AttributeError saying it doesn't exisit (even though it does). If user wants to access still, can use obj._<ClassName>.__<Data>

Attribute management. Use @property inistead of getters and setters. @proptery is a class decorator that uses descriptor protocol. You can have:
@property
def x(self):
    return self._x

@x.setter
def x(self,value):
    self._x = value

Now, wherever in code the property "x" (note the name, not the _x) is accessed, it will call those methods based on context. If e.x, call getter and return e._x. If e.x = 2, call setter with value = 2, and set _x = value.
If updating bunch of code that uses name of property directly and you wanted everything to first go through a new setter, doing this means you can leave all that code alone as it will now route to yours. Most important is the name def x, as it will only look for code that access "x". So if I had def a(self): then anything that said e.a would call that function, which could get e._x.
Can get super confusing with bad design, so keep like-minded things together. Could also make empty property def x(self): pass, then use @x.getter and @x.setter. But using @proptery then def x(self): as the getter works.

@property can be used to make something write-only, for example passwords. Shouldn't be able to read, only change. To get it, you'd probably call something that accesses some hash.

Uses fact that @property can do literally anything to use computed data, which is not a data member but derived from them. EX: @property def sum(self): return self.x + self.y. Now if I say obj.sum, it'll give me that, and getting x and y could also go through a @property of its own.

Module 5: Implementing Class Inheritance
-----------------------------------------------------------------
Inheritance: An object is-a different object. Takes all methods data etc. from super.
Polymorphism: Object could have same methods but different "forms" or behaviors. Move for a dog could be different from Move for a fish.
To inherit, class E(T) makes E a child of T. All methods and constructor are inherited.
To override, redefine the method with the same name. Since python is dynamic, can be any params count. Other languages have overload to handle param count.
Use super() to get access to the super class methods, params, etc.

Since everything is object, you are always inheriting from class "object". Contains the default __ methods. Thus, defining the __ methods like __str__ and __init__ are just overridingi from object class.

To check type, use isinstance(instsance, class) or issubclass(child,parent) (#1 is sub of #2)
If you were to use methods that are only in Employee on children, it will still call them, making them "act" like Employee class.

Exceptions all derive from BaseException. Each one can have children and they can have children. Example: ZeroDivisionError is a child or ArithmeticError, child of Exception, child of BaseException.

super().method() is same as saying <SuperClass>.method(self). Cannot use self to call super method because self refers to whatever class is calling the method, which would call itself. Ex: Dev class increase_salary calling self.increase_salary, would just call itself. Infinite recursion.

super().method() is prefered for Method Resolution Order, makes code dynamic. Hard coding the class name needs to change every time that class changes name or if the parent of our class changes to another class (cause now it'd still call the hardcoded class which is no longer a parent)

Since objects use __dict__ to store stuff, we can optimize memory allocation. Use "Slots". It will use __slots__ instead of __dict__ and will only have the list of items you gave it, no dynamic adding of attribute. If I tried to say employee.title when the class didn't have one, with slots you can't. With dict it'd add it as normal. This allows for faster attribute access and less memory usage. Note that if parent doesn't use slots, then child will still have __dict__. Will just be empty if slots has all the init stuff. Otherwise the __dict__ won't evene be created.

Python has multiple inheritance. People tend to avoid this. Makes code quickly confusing. Some languages use "Traits" instead. But python we use mostly for "Mixin" classes. For example, a method called has_slots(self). Could check if __slots__ exists via hasattr(self,"__slots__") as well as assert that __dict__ doesn't exist. Then any object that inherits other objects could additionally inherit ours just for that method.

If have <Class>(class1, class2) and both super classes define same method, which one runs? Method Resolution Order, each class has a __mro__ which gives tuple that gives order methods are searched for. Will always start with class calling __mro__, and "object" at end. Uses C3 algorithm, first look at subs before looking upper. Also takes account of order of <class>(class1, class2). Will look at class1 before class2. However, remember that if any parent doesn't use __slots__, then the child will have a __dict__.

Module 6: Accessing Class Attributes and Methods
-----------------------------------------------------------------
When python sees a function or class, a new object is allocated in memory of the thing itself. Basically, function call allocates memory for the instance, but memory is also allocated for the function itself (its existence). Not true for languages like C++, where running code is compiled to binary ASM instructions and classes, if no instance exists, are not stored anywhere in memory (basically doing nothing)

This means the class name itself (Employee) has a __dict__, which returns mappingproxy({'__dict__','__doc__',...}) which is seen as a read-only dictionary. __init__ and the methods we create are attributes of the object itself. Whereas data members are attributes of the instances. Since they are attributes, these 2 are equivalent:

Employee.__dict__["some_func"](employee2,20) # Note self isn't implicit so we provide it
employee2.some_func(20) # self is implicit with dot notation, just pass 20.

Classes can have its own attributes, like __slots__. They are like constants, static. Static variables, methods, etc. for example minimum_wage could be a static, used across all employee instances and is the same throughout.

When looking at attribute of instance, first its own __dict__, then the class __dict__.

Methods are instance methods, i.e. each instance uses it with its own data. But to make a class method/static method, use decorator @classmethod. First param is cls, short for class. Ex:

@classmethod
def change_min_wage(cls,new_wage):
    ...

Common use case of static methods are factory functions. Example is date from datetime. For an employee, when adding one and they give name and dob, we can use static to get their actual age since this needs to be done for every new employee and is done exactly the same way. Instead of having it be calculated per instance. We can use cls() to instantiate new instance. Thus the new_employee class/static method can calculate age given dob, and then make an instance of an employee by using cls(name,age,cls.min_wage). We call these Factory Functions.

Can also use @staticmethod. Almost the same, but doesn't get class or instance as first param. It's like a regular function, no relation to the class. Like utility methods that are based on class but don't need the class or instance to work. Literally just a placeholder, almost never used.

Module 7: Using Data Classes
-----------------------------------------------------------------
Using instance of a class as an attribute of another class is called Composition. Like so:

class Project: ...
class Employee:
def __init__(self,project,...):
self.project = project # This is an instance of type Project

inheritance is is-a. Composition is more a has-a. Employee has-a project, but developer is-a employee.

When making classes, the init is typically just assigning self.x to its params. It's annoying to create an init of each class, so we have Data Classes to alleviate that.

from dataclasses import dataclass
Then you can say:
@dataclass
class Project:
    name: str
    payment: int
    client: str
^ That will be the same as making class with init, etc. Provides init and repr implicitly.

Since python doesn't have types (dynamically typed), can use type checking/hinting to "enforce" types. Can use for parameters, return values, class attributes, etc. Could use Any in data classes by importing: from typing import Any then use Any instead of str,int,etc.

3.10 and up, to use slots: @dataclass(slots=True). Can use default values with dataclass, like so: name: str = "default_str". In params, would be (name: str = "s")

Next steps: SOLID principles, abstract classes (no instances), kind of like interface, bundle of functionality, designed to be extended. Learn docstrings, documentation ("""doc"""). Even deeper, learn Metaclasses, Descriptors, and Class decorators.